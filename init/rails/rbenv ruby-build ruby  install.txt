rbenv ruby-build ruby  install
// 1.初期化設定
$ echo 'eval "$(rbenv init -)"' >> ~/.bash_profile
// 2.初期化設定の反映
$ source ~/.bash_profile
// 3.rbenvのインストール：
$ brew install rbenv ruby-build
// 4.インストール可能なRubyのバージョン一覧の表示
$ rbenv install -l
// 5.指定したRubyのバージョンをインストール
$ rbenv install 2.3.5
// 6.インストールしたRubyを使用可能な状態にする⇒shimsへの反映
$ rbenv reha


rbenvのフォルダ構成
~/.rbenv/ （ルートフォルダ）
~/.rbenv/shims/ （rubyやgemがインストールしてくれるコマンドのラッパーを保存するフォルダ）
~/.rbenv/version （グローバルに設定しているRubyバージョンを記録するファイル）
~/.rbenv/versions/ （その他のインストールした各種Rubyバージョンをインストールするフォルダ）

// "rbenv which コマンド名"を使って、コマンドの参照先のバージョンが変わっている事を確認してみる。
// rubyコマンドの参照先を確認(rubyコマンドの参照先がバージョン2.3.5を向いている事を確認)
$ rbenv which ruby
~/.rbenv/versions/2.3.5/bin/ruby
// rubyのバージョンを切り替え
$ rbenv global 2.5.0-dev
// rubyコマンドの参照先が変わった事を確認
$ rbenv which ruby
~/.rbenv/versions/2.5.0-dev/bin/ruby

$ ruby -v
ruby 2.3.5p376 (2017-09-14 revision 59905) [x86_64-darwin16]
$ rbenv local 2.5.0-dev
$ ruby -v
ruby 2.6.0dev (2018-03-11 trunk 62724) [x86_64-darwin16]


bundlerのインストール
インストールコマンド

$ rbenv exec gem install bundler

Gitのインストール
インストール

$ brew update
$ brew install git
Gitのバージョン確認

$ git --version

設定情報の確認

$ git config --list

Rails のダウンロード

gem i -v x.y.z rails


同一dir
rails new . --webpack=react --database=postgresql

new　dir　xxx
rails new  xxxx --webpack=react --database=postgresql

## webpack install が失敗したとき
bundle exec rails webpacker:install